# This is an autogenerated nbx_user.py file for a [NBX](www.nimblebox.ai) app:
# project name: plot
# created time: Monday W24 [ UTC 13 Jun, 2022 - 05:26:47 ]
#   created by: 

import os
import random
#nbx nbox_setup/

os.environ["NBOX_LOG_LEVEL"] = "DEBUG" # Keep it the way you like

from nbox import Operator
from nbox.hyperloop.job_pb2 import Resource

from tests.plot_release_highlights_0_24_0 import Release_Highlights_for_sklearn_0_24_0
from tests.plot_release_highlights_0_22_0 import Release_Highlights_for_sklearn_0_22_0
from tests.plot_compare_calibration import Comparison_of_calibrations
from tests.plot_calibration_multiclass import Calibration_of_multiclass
from tests.plot_classifier_comparison import CLassifier_comparisions
from tests.plot_inductive_clustering import Inductive_clustering
from tests.plot_forest_importances import Forest_importances
from tests.plot_feature_transformation import Feature_transformation
from tests.plot_ensemble_oob import Ensemble_OOB
from tests.plot_forest_importances_faces import Forest_importance_faces
from tests.plot_voting_probas import Voting_probas
from tests.plot_forest_iris import Forest_iris
from tests.plot_permutation_importance import Permutation_importance
from tests.plot_permutation_importance_multicollinear import Permutation_importance_multicollinearity
from tests.plot_pipeline_display import Pipeline_display
from tests.plot_roc_curve_visualization_api import ROC_curve_viz_api
from tests.plot_det import Detection_error_tradeoff
from tests.plot_successive_halving_iterations import Halving_iterations
from tests.plot_document_classification_20newsgroups import Document_classification_text


def get_op() -> Operator:
  run_op = [
    Release_Highlights_for_sklearn_0_24_0,
    Release_Highlights_for_sklearn_0_22_0,
    Comparison_of_calibrations,
    Calibration_of_multiclass,
    CLassifier_comparisions,
    Inductive_clustering,
    Forest_importances,
    Feature_transformation,
    Ensemble_OOB,
    Forest_importance_faces,
    Voting_probas,
    Forest_iris,
    Permutation_importance,
    Permutation_importance_multicollinearity,
    Pipeline_display,
    ROC_curve_viz_api,
    Detection_error_tradeoff,
    Halving_iterations,
    Document_classification_text,
  ]

  job_class = random.choice(run_op)
  job = job_class()

  return job

def get_resource() -> Resource:
  """Define your pod config here"""
  return Resource(
    cpu = "100m",         # 100mCPU
    memory = "200Mi",     # MiB
    disk_size = "1Gi",    # GiB
    gpu = "",             # keep "" for no GPU
    gpu_count = "",       # keep "" when no GPU
    timeout = 300_000,    # 300s
    max_retries = 3,      # third times the charm
  )

#nbx /nbox_setup

# if __name__ == "__main__":
#   run_op = [
#     Release_Highlights_for_sklearn_0_24_0,
#     Release_Highlights_for_sklearn_0_22_0,
#     # Comparison_of_calibrations(), 
#     # Calibration_of_multiclass(),
#     # CLassifier_comparisions(),
#     # Inductive_clustering(),
#     # Forest_importances(),
#     # Feature_transformation(),
#     # Ensemble_OOB(),
#     # Forest_importance_faces(),
#     # Voting_probas(),
#     # Forest_iris(),
#     # Permutation_importance(),
#     # Permutation_importance_multicollinearity(),
#     # Pipeline_display(),
#     # ROC_curve_viz_api(),
#     # Detection_error_tradeoff(),
#     # Halving_iterations(),
#     # Document_classification_text(),
#   ]

#   random_op = random.choice(run_op)
#   print(random_op)

#   random_op_initialised = random_op()
#   print(random_op_initialised)
